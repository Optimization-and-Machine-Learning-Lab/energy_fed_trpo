# build q table for the simplest env
import sys
import numpy as np

np.set_printoptions(threshold=sys.maxsize)

# env = BanmaEnv()
# env = FLEnv(0)
storage_slices = 41
action_slices = 81

capacity = 6.4   #1.0

storage_options = np.linspace(0, capacity, storage_slices)
# np.arange(storage_slices+1) / storage_slices     # slice the storage to 40 pieces
action_options = np.linspace(-capacity, capacity, action_slices)
print(storage_options)
print()
print(action_options)
print()
storage_unit = storage_options[1]

# exit()

price = np.array([0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.54, 0.54, 0.54, 0.54, 0.54, 0.22, 0.22])
# price = np.array([0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.22, 0.54, 0.54, 0.54, 0.54, 0.54, 0.22, 0.22])
# building 0
# daily_load = np.array([1.11978309, 0.76816295, 0.87315243, 0.83054701, 0.86020929,
#                         0.95714514, 1.10605024, 0.81951836, 0.88964521, 1.09147795,
#                         1.43532721, 1.38397538, 1.48023339, 1.02653598, 0.97702104,
#                         0.97477498, 1.20762802, 1.56440962, 1.76958789, 2.06710011,
#                         1.86987534, 1.5113112 , 1.28299162, 1.12902468])
# daily_solar = np.array([0.        , 0.        , 0.        , 0.        , 0.        , 0., 
#                             0.03038468, 0.42636759, 1.18112355, 1.8242703 , 2.34805091, 2.63622672,
#                             2.74510293, 2.62572737, 2.32459339, 1.76772156, 1.12567972, 0.56241727,
#                             0.15598965, 0.00660886, 0.        , 0.        , 0.        , 0.        ])
net_consumption = [ 2.57388769, 1.06785906, 1.06633249, 1.07912349, 1.0614529 , 1.06183797,
  0.98020639, 0.55325365, 1.46667875, 1.17852929,-1.42670708,-1.53227298,
 -1.60422209,-1.62287718,-1.42709882,-1.22552794,-0.59919452, 0.36771883,
  2.28354732, 3.01971129, 4.06509702, 3.57026284, 3.58005252, 3.08045981]
# net_consumption = [3.64369359,4.13514272,4.12636585,5.12430817,4.12932792,3.12763822,
#  2.20580563,1.94175644,1.49088751,1.07502141,0.58447524,0.57978077,
#  0.54552231,3.836634  ,3.38968636,3.41414287,4.77225941,4.28717398,
#  3.35949288,4.45626154,4.11209413,4.12352848,4.12287115,4.14161439]
# net_consumption = [ 1.40751093, 0.71994766, 0.72316702, 0.72026593, 0.70849357, 0.72950155,
#   0.60331985, 1.36633244, 0.69428517,-1.06732696,-1.67063796,-1.78883365,
#  -1.87647247,-1.87606381,-1.68136607,-1.45048594,-0.85828624, 0.11115929,
#   1.50120829, 1.61882237, 2.93126165, 2.41284087, 2.42846225, 1.93614096]
# net_consumption = [5.96974799,5.97890758,5.9693273 ,5.97059105,5.97020642,5.9767205 ,
#  4.45064357,4.51182177,6.97071871,7.23869492,4.73063028,1.97147449,
#  1.31653298,1.19823088,1.55047335,1.96358216,2.82925807,5.96463901,
#  5.50860615,5.50607757,5.99984261,5.98538315,5.96787849,5.97788834]
# net_consumption = [ 0.89996075, 0.20512737, 0.18834337, 0.19453861, 0.18447069, 0.1998421 ,
#  -0.63468512, 0.05787701,-0.60542757,-2.38775083,-2.98745753,-3.08033811,
#  -3.16674848,-3.14924286,-2.96005695,-2.75782179,-2.17596517,-1.22469417,
#   0.18239335, 0.37550065, 2.41097472, 1.87798672, 1.90348768, 1.3919208 ]

# net_consumption = [ 2.28961214, 0.79677214, 0.77287172, 0.78773655, 0.77936627, 0.7983395 ,
#  -0.06861995,-0.40340207, 0.39908817, 0.17013137,-2.43303555,-2.59861266,
#  -2.65247203,-2.6521337 ,-2.4301443 ,-2.27775506,-1.68718581,-0.71364191,
#   1.26583337, 1.95571081, 3.76784317, 3.30336251, 3.29168448]
# net_consumption = [3.60310781,4.10900067,4.09969722,5.10461508,4.0859312 ,3.11064038,
#  1.99437285,1.71842333,1.35303772,0.83486815,0.36219969,0.39929708,
#  0.31011515,3.70774045,3.22647892,3.22371375,4.60407934,4.16213107,
#  3.1868147 ,4.2477546 ,4.11375374,4.11229395,4.09551758]
# net_consumption = [ 1.55554958, 0.8758258 , 0.87574432, 0.87378031, 0.87023205, 0.88998353,
#   0.20128572, 0.86380445, 0.21280456,-1.5375858 ,-2.14594442,-2.23706587,
#  -2.31224618,-2.33088726,-2.13011752,-1.87742015,-1.31283896,-0.31412178,
#   1.05217266, 1.19365958, 3.07825071, 2.59034095, 2.56908986]
# net_consumption = [5.81043758,5.80547209,5.79983144,5.81323624,5.7956346 ,5.79404154,
#  4.16609514,4.165171  ,6.66206395,6.93661968,4.42500362,1.66132959,
#  1.0627399 ,0.90956822,1.15643307,1.68883309,2.51378358,5.72520464,
#  5.15538324,5.17229572,5.81119868,5.80798169,5.81091802]
# net_consumption = [ 0.9438161 , 0.23244258, 0.21091066, 0.22753027, 0.24392822, 0.23947194,
#  -0.7603825 ,-0.09893762,-0.74085881,-2.44940229,-3.08174475,-3.19999974,
#  -3.29543807,-3.28756427,-3.08324446,-2.87181207,-2.28935126,-1.29641147,
#   0.09666873, 0.21333673, 2.43360751, 1.93956977, 1.93614758]


def value_2_index(value):
    # index = value * (storage_slices - 1)
    index = value / storage_unit
    if abs(index - round(index)) > 0.1:
        print("value", value)
        print("my index", index)
        print("round index", round(index))
        print("bug")
    return round(index)

T = 23
Q = np.zeros((storage_slices,action_slices,T+1))
Q[:,:,T] = 0
Q[:,:,T] = - 2000 * np.reshape(storage_options,[-1,1])        # if the storage at the end is not zero, punish
# print(Q[:, :, -1])

for t in range(T-1,-1,-1):
    # print("t is", t)
    for si, s in enumerate(storage_options):
        # print("si is", si, ", s is", s)
        for ai, a in enumerate(action_options):
            # print("\nai is", ai, ", a is", a)
            # net_con = daily_load[t] - daily_solar[t]
            net_con = net_consumption[t]

            if a > 0.0:                            # charge
                valid_action = min(a, capacity - s)    
            elif a < 0.0 and net_con > 0.0:        # discharge
                valid_action = max(max(a, -net_con), -s)
            else:
                valid_action = 0.0
            if valid_action != a:
                Q[si,ai,t] = - np.inf
                continue
            # print("valid action is", valid_action)
            net_con += valid_action
            net_con = max(net_con, 0)
            # reward = - price[t] * net_con
            reward = -net_con

            sp = s + a
            spi = value_2_index(sp)        # index of storage(state) for the next time step

            if spi >= storage_slices:
                SheSaidWeWillNotGotHere

            # print("si, ai", si, ai, "max next q", np.max(Q[spi,:,t+1]))
            Q[si,ai,t] = reward + np.max(Q[spi,:,t+1])
            # print("spi is", spi)
            # print("next max value", np.max(Q[spi,:,t+1]))
            # print("next max index", np.argmax(Q[spi,:,t+1]))
    # if t == 10:
        # exit()

print("max reward", np.max(Q[0,:,0])/24)
# print(np.argmax(Q[0,:,0]))
# print(">"*20)
# print(Q[0, 20, 0])
# print(Q[0, 20, 1])
# print(">"*20)
optimal_action = []
s = 0
ai = np.argmax(Q[0,:,0])
optimal_action.append(action_options[ai])

for t in range(1, T):
    s += action_options[ai]
    si = value_2_index(s)
    ai = np.argmax(Q[si,:,t])
    optimal_action.append(action_options[ai])

print(optimal_action)
# [1.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.6499999999999999, -0.35, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.25, 0.75, -0.04999999999999993, -0.95, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]